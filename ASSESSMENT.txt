1]

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;

class emp{
	private int id = 0;
	private String name;
	private String department;
	private Date dateOfJoining;
	private int age;
	private int salary;
	emp() {
		this.id += 1;
	}
	emp(String name, String dept, Date date, int age, int salary)
	{
		this.name = name;
		this.department = dept;
		this.dateOfJoining = date;
		this.age = age;
		this.salary = salary;
	}
	void setName(String name) {
		this.name = name;
	}
	void setDepartment(String dept) {
		this.department= dept;
	}
	void setDateOfJoining(Date date) {
		this.dateOfJoining = date;
	}
	void setAge(int age) {
		this.age = age;
	}
	int getAge() {
		return age;
	}
	int getId() {
		return id;
	}
	String getName() {
		return name;
	}
	String getDepartment() {
		return department;
	}
	Date getDateOfJoining() {
		return dateOfJoining;
	}
	int getSalary() {
		return salary;
	}
	
	@Override
	public String toString() {
		String ans = String.format("%-15s %-30s %-30s %-10s %-10s\n", this.name, this.department, this.dateOfJoining, this.age, this.salary);
		return ans;
	}

}
class salaryComparator implements Comparator<emp>{
	public int compare(emp o1, emp o2) {
		if(o1.getSalary() != o2.getSalary()) {
			return o1.getSalary() - o2.getSalary();
		}
		return 0;
	}
}
class AgeComparator implements Comparator<emp>{

	public int compare(emp o1, emp o2) {
		
		if(o1.getAge() != o2.getAge()) {
			return o1.getAge() + o2.getAge();
		}
		else {
			return o1.getSalary() + o2.getSalary();
		}
	}
}

public class Employee 
{
	public static void main(String[] args) throws ParseException 
	{
		Scanner in = new Scanner(System.in);
		ArrayList<emp> employees = new ArrayList<emp>();
		SimpleDateFormat obj = new SimpleDateFormat("dd-mm-yyyy");
		employees.add(new emp("Rohini", "DataAnalysis", obj.parse("10-10-2000"), 45, 90000));
		employees.add(new emp("Ranganathan", "Production", obj.parse("09-10-2000"), 45, 92000));
		employees.add(new emp("Pankaj", "Marketing", obj.parse("02-02-2002"), 38, 75000));
		
		System.out.println("1.Sort employees by salary");
		System.out.println("2.Sort employees by age and by date of\r\n" + "joining");
		System.out.println("Enter Your Choice");
		int choice = in.nextInt();
		switch(choice)
		{
			case 1: {
						Collections.sort(employees, new salaryComparator());
						System.out.println(String.format("%-15s %-30s %-30s %-10s %-10s\n", "Employee Name", "Department", "DOJ", "Age", "Salary"));
						for (int i = 0; i < employees.size(); i++)
						{
							System.out.println(employees.get(i));
						}
						
						break;
					}
			case 2: {
						Collections.sort(employees, new AgeComparator());
						System.out.println(String.format("%-15s %-30s %-30s %-10s %-10s\n", "Employee Name", "Department", "DOJ", "Age", "Salary"));
						for (int i = 0; i < employees.size(); i++)
						{
							System.out.println(employees.get(i));
						}
						break;
					}
			default:
					break;
		}
	
	}
}



2]

public class PasswordValidator {

	
	public static boolean isValid(String password)
	{

		
		if (!((password.length() >= 8)
			&& (password.length() <= 15))) {
			return false;
		}

		
		if (password.contains(" ")) {
			return false;
		}
		if (true) {
			int count = 0;

			for (int i = 0; i <= 9; i++) {

				
				String str1 = Integer.toString(i);

				if (password.contains(str1)) {
					count = 1;
				}
			}
			if (count == 0) {
				return false;
			}
		}

		
		if (!(password.contains("@") || password.contains("#")
			|| password.contains("!") || password.contains("~")
			|| password.contains("$") || password.contains("%")
			|| password.contains("^") || password.contains("&")
			|| password.contains("*") || password.contains("(")
			|| password.contains(")") || password.contains("-")
			|| password.contains("+") || password.contains("/")
			|| password.contains(":") || password.contains(".")
			|| password.contains(", ") || password.contains("<")
			|| password.contains(">") || password.contains("?")
			|| password.contains("|"))) {
			return false;
		}

		if (true) {
			int count = 0;

			
			for (int i = 65; i <= 90; i++) {

				
				char c = (char)i;

				String str1 = Character.toString(c);
				if (password.contains(str1)) {
					count = 1;
				}
			}
			if (count == 0) {
				return false;
			}
		}

		if (true) {
			int count = 0;

			
			for (int i = 90; i <= 122; i++) {

				
				char c = (char)i;
				String str1 = Character.toString(c);

				if (password.contains(str1)) {
					count = 1;
				}
			}
			if (count == 0) {
				return false;
			}
		}

		
		return true;
	}

	
	public static void main(String[] args)
	{

		String password1 = "PASSWORDGEN";

		if (isValid(password1)) {
			System.out.println("Valid Password");
		}
		else {
			System.out.println("Invalid Password!!!");
		}

		String password2 = "passwordgen";
		if (isValid(password2)) {
			System.out.println("Valid Password");
		}
		else {
			System.out.println("Invalid Password!!!");
		}
	}
}

4]

package bank;
import java.awt.Menu;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class Main {
public static void main(String [] args)
{
    Scanner s=new Scanner(System.in);
    System.out.println("Enter the input string");
 String s1=s.nextLine().replaceAll(" ","");
    Map<Character,Integer> map=new TreeMap<Character,Integer>();

    for(int i = 0; i < s1.length(); i++){
       char c = s1.charAt(i);
       Integer val = map.get(new Character(c));
       if(val != null){
         map.put(c, new Integer(val + 1));
       }else{
         map.put(c,1);
       }
    }           

    for(Map.Entry<Character,Integer> en:map.entrySet()){
        int count=en.getValue();
        System.out.printf("%c : ",en.getKey());
        for(int i=0;i<count;i++)
        System.out.printf("*");

        System.out.printf("\n");
    }


    }
}